{"version":3,"sources":["components/Validation/Validation.js","components/Char/Char.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Validation","props","validateText","inputLength","style","fontSize","Char","display","textAlign","padding","margin","border","borderRadius","backgroundColor","onClick","clicked","character","App","inputChangedHandler","event","setState","userInput","target","value","deleteInputCharHandler","index","text","state","split","splice","updatedText","join","charList","this","map","char","className","onChange","type","fontWeight","length","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAyBeA,EAtBI,SAACC,GAGhB,IAAIC,EAAc,KAalB,OAVEA,EADCD,EAAME,YAAc,GACH,gBACVF,EAAME,aAAe,IAAMF,EAAME,YAAc,GACrC,mBACVF,EAAME,aAAe,IAAMF,EAAME,YAAc,EACrC,iBAEA,kBAKpB,8BACE,mBAAGC,MAAO,CAACC,SAAS,QAApB,SAA8BH,OCYrBI,EA9BF,SAACL,GAWV,OACI,qBAEAG,MAAO,CACHG,QAAS,eACTC,UAAW,SACXC,QAAS,OACTC,OAAQ,OACRC,OAAQ,kBACRC,aAAa,OACbC,gBAAgB,SAEpBC,QAASb,EAAMc,QAXf,SAaCd,EAAMe,aCoBAC,G,wDA1Cb,WAAYhB,GAAO,IAAD,8BAChB,cAAMA,IAKRiB,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAACC,UAAWF,EAAMG,OAAOC,SAPvB,EAUlBC,uBAAyB,SAACC,GAC1B,IAAMC,EAAO,EAAKC,MAAMN,UAAUO,MAAM,IACxCF,EAAKG,OAAOJ,EAAO,GACnB,IAAMK,EAAcJ,EAAKK,KAAK,IAC9B,EAAKX,SAAS,CAACC,UAAUS,KAZrB,EAAKH,MAAM,CAACN,UAAU,IAFR,E,0CAiBlB,WAAS,IAAD,OACAW,EAAWC,KAAKN,MAAMN,UAAUO,MAAM,IAAIM,KAAI,SAACC,EAAMV,GACzD,OAAO,cAAC,EAAD,CACPT,UAAWmB,EACXpB,QAAS,kBAAK,EAAKS,uBAAuBC,KACrCA,MAGP,OACE,sBAAKW,UAAU,MAAf,UACA,uBACEC,SAAUJ,KAAKf,oBACfK,MAAOU,KAAKN,MAAMN,UAClBiB,KAAK,OACLlC,MAAO,CAACI,UAAU,YAGpB,mBAAGJ,MAAO,CAACC,SAAS,OAAQkC,WAAW,UAAvC,SAAmDN,KAAKN,MAAMN,YAC9D,cAAC,EAAD,CAAYlB,YAAa8B,KAAKN,MAAMN,UAAUmB,SAC9CR,S,GArCYS,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.883fac31.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Validation = (props) => {\n    \n    //let validateText;\n    let validateText= null\n\n    if(props.inputLength > 25){\n      validateText =    \"Text too long\"\n    }else if (props.inputLength <= 25 && props.inputLength > 15){\n        validateText =  \"Text long enough\"\n    }else if (props.inputLength <= 15 && props.inputLength > 0){\n        validateText =  \"Text too short\"\n    }else {\n        validateText =  \"There's no Text\"\n    }\n    \n    \n    return ( \n    <div>\n      <p style={{fontSize:\"20px\"}}>{validateText}</p>\n    </div> );\n}\n \nexport default Validation;","import React from \"react\";\n\n\nconst Char = (props) => {\n   \n    /*  const myStyle={\n        display: \"inline-block\", \n        padding: \"16px\", \n        textAlign: \"center\",\n        margin: \"16px\", \n        border: \"1px solid black\", \n        borderRadius:\"10px\"\n    } */\n\n    return ( \n        <div\n      //  style={myStyle}\n        style={{\n            display: \"inline-block\", \n            textAlign: \"center\", \n            padding: \"16px\", \n            margin: \"16px\", \n            border: \"1px solid black\",\n            borderRadius:\"10px\",\n            backgroundColor:\"white\"\n        }}\n        onClick={props.clicked}\n        >\n        {props.character}\n        </div>\n     );\n}\n \nexport default Char;","import React, {Component} from \"react\";\nimport Validation from \"../components/Validation/Validation\";\nimport Char from '../components/Char/Char';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n      this.state={userInput:\"\"}\n  }\n\n\n  inputChangedHandler = (event) => {\n    this.setState({userInput: event.target.value})\n  }\n\n  deleteInputCharHandler = (index) =>{\n  const text = this.state.userInput.split(\"\")\n  text.splice(index, 1)\n  const updatedText = text.join(\"\");\n  this.setState({userInput:updatedText})\n  }\n  \n  render(){\n    const charList = this.state.userInput.split(\"\").map((char, index)=>{\n      return <Char \n      character={char}\n      clicked={()=> this.deleteInputCharHandler(index)}\n      key={index} />\n    })\n\n    return (\n      <div className=\"App\">\n      <input\n        onChange={this.inputChangedHandler}\n        value={this.state.userInput}\n        type=\"text\"\n        style={{textAlign:\"center\"}}\n\n      />\n      <p style={{fontSize:\"24px\", fontWeight:\"bolder\"}}>{this.state.userInput}</p>\n      <Validation inputLength={this.state.userInput.length} />\n     {charList}\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}